/* tslint:disable */
/* eslint-disable */
/**
 * Mvd
 * The Mvd API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateDeviceDto,
    CreateDeviceDtoFromJSON,
    CreateDeviceDtoToJSON,
} from '../models';

export interface ExternalApiControllerCheckRequest {
    identifier: string;
    battery: number;
}

export interface ExternalApiControllerUploadFileRequest {
    identifier: string;
    source: ExternalApiControllerUploadFileSourceEnum;
    file?: Blob;
}

/**
 * ExternalApiApi - interface
 * 
 * @export
 * @interface ExternalApiApiInterface
 */
export interface ExternalApiApiInterface {
    /**
     * 
     * @param {string} identifier 
     * @param {number} battery 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApiApiInterface
     */
    externalApiControllerCheckRaw(requestParameters: ExternalApiControllerCheckRequest): Promise<runtime.ApiResponse<CreateDeviceDto>>;

    /**
     */
    externalApiControllerCheck(requestParameters: ExternalApiControllerCheckRequest): Promise<CreateDeviceDto>;

    /**
     * 
     * @param {string} identifier 
     * @param {'BM' | 'MD' | 'EoM' | 'Sch'} source 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApiApiInterface
     */
    externalApiControllerUploadFileRaw(requestParameters: ExternalApiControllerUploadFileRequest): Promise<runtime.ApiResponse<CreateDeviceDto>>;

    /**
     */
    externalApiControllerUploadFile(requestParameters: ExternalApiControllerUploadFileRequest): Promise<CreateDeviceDto>;

}

/**
 * 
 */
export class ExternalApiApi extends runtime.BaseAPI implements ExternalApiApiInterface {

    /**
     */
    async externalApiControllerCheckRaw(requestParameters: ExternalApiControllerCheckRequest): Promise<runtime.ApiResponse<CreateDeviceDto>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling externalApiControllerCheck.');
        }

        if (requestParameters.battery === null || requestParameters.battery === undefined) {
            throw new runtime.RequiredError('battery','Required parameter requestParameters.battery was null or undefined when calling externalApiControllerCheck.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.battery !== undefined) {
            queryParameters['battery'] = requestParameters.battery;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external-api/{identifier}/settings`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateDeviceDtoFromJSON(jsonValue));
    }

    /**
     */
    async externalApiControllerCheck(requestParameters: ExternalApiControllerCheckRequest): Promise<CreateDeviceDto> {
        const response = await this.externalApiControllerCheckRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async externalApiControllerUploadFileRaw(requestParameters: ExternalApiControllerUploadFileRequest): Promise<runtime.ApiResponse<CreateDeviceDto>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling externalApiControllerUploadFile.');
        }

        if (requestParameters.source === null || requestParameters.source === undefined) {
            throw new runtime.RequiredError('source','Required parameter requestParameters.source was null or undefined when calling externalApiControllerUploadFile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.source !== undefined) {
            queryParameters['source'] = requestParameters.source;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/external-api/{identifier}/upload`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateDeviceDtoFromJSON(jsonValue));
    }

    /**
     */
    async externalApiControllerUploadFile(requestParameters: ExternalApiControllerUploadFileRequest): Promise<CreateDeviceDto> {
        const response = await this.externalApiControllerUploadFileRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ExternalApiControllerUploadFileSourceEnum {
    BM = 'BM',
    MD = 'MD',
    EoM = 'EoM',
    Sch = 'Sch'
}
