/* tslint:disable */
/* eslint-disable */
/**
 * Mvd
 * The Mvd API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatePermissionDto,
    CreatePermissionDtoFromJSON,
    CreatePermissionDtoToJSON,
    Permission,
    PermissionFromJSON,
    PermissionToJSON,
} from '../models';

export interface PermissionsControllerUpdatePermissionsRequest {
    userId: number;
    createPermissionDto: CreatePermissionDto;
}

/**
 * PermissionsApi - interface
 * 
 * @export
 * @interface PermissionsApiInterface
 */
export interface PermissionsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    permissionsControllerGetUserPermissionsRaw(): Promise<runtime.ApiResponse<Permission>>;

    /**
     */
    permissionsControllerGetUserPermissions(): Promise<Permission>;

    /**
     * 
     * @param {number} userId 
     * @param {CreatePermissionDto} createPermissionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    permissionsControllerUpdatePermissionsRaw(requestParameters: PermissionsControllerUpdatePermissionsRequest): Promise<runtime.ApiResponse<Permission>>;

    /**
     */
    permissionsControllerUpdatePermissions(requestParameters: PermissionsControllerUpdatePermissionsRequest): Promise<Permission>;

}

/**
 * 
 */
export class PermissionsApi extends runtime.BaseAPI implements PermissionsApiInterface {

    /**
     */
    async permissionsControllerGetUserPermissionsRaw(): Promise<runtime.ApiResponse<Permission>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     */
    async permissionsControllerGetUserPermissions(): Promise<Permission> {
        const response = await this.permissionsControllerGetUserPermissionsRaw();
        return await response.value();
    }

    /**
     */
    async permissionsControllerUpdatePermissionsRaw(requestParameters: PermissionsControllerUpdatePermissionsRequest): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling permissionsControllerUpdatePermissions.');
        }

        if (requestParameters.createPermissionDto === null || requestParameters.createPermissionDto === undefined) {
            throw new runtime.RequiredError('createPermissionDto','Required parameter requestParameters.createPermissionDto was null or undefined when calling permissionsControllerUpdatePermissions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/permissions/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePermissionDtoToJSON(requestParameters.createPermissionDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     */
    async permissionsControllerUpdatePermissions(requestParameters: PermissionsControllerUpdatePermissionsRequest): Promise<Permission> {
        const response = await this.permissionsControllerUpdatePermissionsRaw(requestParameters);
        return await response.value();
    }

}
