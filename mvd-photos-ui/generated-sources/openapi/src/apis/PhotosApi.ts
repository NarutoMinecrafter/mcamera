/* tslint:disable */
/* eslint-disable */
/**
 * Mvd
 * The Mvd API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Photo,
    PhotoFromJSON,
    PhotoToJSON,
    RemovePhotosDto,
    RemovePhotosDtoFromJSON,
    RemovePhotosDtoToJSON,
} from '../models';

export interface PhotosControllerDownloadPhotoByPathRequest {
    imageName: string;
}

export interface PhotosControllerGetLastPhotoRequest {
    deviceId: number;
}

export interface PhotosControllerGetPhotoByPathRequest {
    imageName: string;
}

export interface PhotosControllerGetPhotosByIdRequest {
    deviceId: number;
    start: number;
    end: number;
}

export interface PhotosControllerRemovePhotoByIdRequest {
    id: number;
}

export interface PhotosControllerRemovePhotosByIdRequest {
    removePhotosDto: RemovePhotosDto;
}

/**
 * PhotosApi - interface
 * 
 * @export
 * @interface PhotosApiInterface
 */
export interface PhotosApiInterface {
    /**
     * 
     * @param {string} imageName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApiInterface
     */
    photosControllerDownloadPhotoByPathRaw(requestParameters: PhotosControllerDownloadPhotoByPathRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    photosControllerDownloadPhotoByPath(requestParameters: PhotosControllerDownloadPhotoByPathRequest): Promise<void>;

    /**
     * 
     * @param {number} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApiInterface
     */
    photosControllerGetLastPhotoRaw(requestParameters: PhotosControllerGetLastPhotoRequest): Promise<runtime.ApiResponse<Photo>>;

    /**
     */
    photosControllerGetLastPhoto(requestParameters: PhotosControllerGetLastPhotoRequest): Promise<Photo>;

    /**
     * 
     * @param {string} imageName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApiInterface
     */
    photosControllerGetPhotoByPathRaw(requestParameters: PhotosControllerGetPhotoByPathRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    photosControllerGetPhotoByPath(requestParameters: PhotosControllerGetPhotoByPathRequest): Promise<void>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} start 
     * @param {number} end 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApiInterface
     */
    photosControllerGetPhotosByIdRaw(requestParameters: PhotosControllerGetPhotosByIdRequest): Promise<runtime.ApiResponse<Array<Photo>>>;

    /**
     */
    photosControllerGetPhotosById(requestParameters: PhotosControllerGetPhotosByIdRequest): Promise<Array<Photo>>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApiInterface
     */
    photosControllerRemovePhotoByIdRaw(requestParameters: PhotosControllerRemovePhotoByIdRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    photosControllerRemovePhotoById(requestParameters: PhotosControllerRemovePhotoByIdRequest): Promise<void>;

    /**
     * 
     * @param {RemovePhotosDto} removePhotosDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApiInterface
     */
    photosControllerRemovePhotosByIdRaw(requestParameters: PhotosControllerRemovePhotosByIdRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    photosControllerRemovePhotosById(requestParameters: PhotosControllerRemovePhotosByIdRequest): Promise<void>;

}

/**
 * 
 */
export class PhotosApi extends runtime.BaseAPI implements PhotosApiInterface {

    /**
     */
    async photosControllerDownloadPhotoByPathRaw(requestParameters: PhotosControllerDownloadPhotoByPathRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.imageName === null || requestParameters.imageName === undefined) {
            throw new runtime.RequiredError('imageName','Required parameter requestParameters.imageName was null or undefined when calling photosControllerDownloadPhotoByPath.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/photos/download/{imageName}`.replace(`{${"imageName"}}`, encodeURIComponent(String(requestParameters.imageName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async photosControllerDownloadPhotoByPath(requestParameters: PhotosControllerDownloadPhotoByPathRequest): Promise<void> {
        await this.photosControllerDownloadPhotoByPathRaw(requestParameters);
    }

    /**
     */
    async photosControllerGetLastPhotoRaw(requestParameters: PhotosControllerGetLastPhotoRequest): Promise<runtime.ApiResponse<Photo>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling photosControllerGetLastPhoto.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/photos/getLastPhoto/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PhotoFromJSON(jsonValue));
    }

    /**
     */
    async photosControllerGetLastPhoto(requestParameters: PhotosControllerGetLastPhotoRequest): Promise<Photo> {
        const response = await this.photosControllerGetLastPhotoRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async photosControllerGetPhotoByPathRaw(requestParameters: PhotosControllerGetPhotoByPathRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.imageName === null || requestParameters.imageName === undefined) {
            throw new runtime.RequiredError('imageName','Required parameter requestParameters.imageName was null or undefined when calling photosControllerGetPhotoByPath.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/photos/preview/{imageName}`.replace(`{${"imageName"}}`, encodeURIComponent(String(requestParameters.imageName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async photosControllerGetPhotoByPath(requestParameters: PhotosControllerGetPhotoByPathRequest): Promise<void> {
        await this.photosControllerGetPhotoByPathRaw(requestParameters);
    }

    /**
     */
    async photosControllerGetPhotosByIdRaw(requestParameters: PhotosControllerGetPhotosByIdRequest): Promise<runtime.ApiResponse<Array<Photo>>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling photosControllerGetPhotosById.');
        }

        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling photosControllerGetPhotosById.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling photosControllerGetPhotosById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/photos/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PhotoFromJSON));
    }

    /**
     */
    async photosControllerGetPhotosById(requestParameters: PhotosControllerGetPhotosByIdRequest): Promise<Array<Photo>> {
        const response = await this.photosControllerGetPhotosByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async photosControllerRemovePhotoByIdRaw(requestParameters: PhotosControllerRemovePhotoByIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling photosControllerRemovePhotoById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/photos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async photosControllerRemovePhotoById(requestParameters: PhotosControllerRemovePhotoByIdRequest): Promise<void> {
        await this.photosControllerRemovePhotoByIdRaw(requestParameters);
    }

    /**
     */
    async photosControllerRemovePhotosByIdRaw(requestParameters: PhotosControllerRemovePhotosByIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.removePhotosDto === null || requestParameters.removePhotosDto === undefined) {
            throw new runtime.RequiredError('removePhotosDto','Required parameter requestParameters.removePhotosDto was null or undefined when calling photosControllerRemovePhotosById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/photos/removeBatch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemovePhotosDtoToJSON(requestParameters.removePhotosDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async photosControllerRemovePhotosById(requestParameters: PhotosControllerRemovePhotosByIdRequest): Promise<void> {
        await this.photosControllerRemovePhotosByIdRaw(requestParameters);
    }

}
