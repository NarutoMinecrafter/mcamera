/* tslint:disable */
/* eslint-disable */
/**
 * Mvd
 * The Mvd API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthCredentialsDto,
    AuthCredentialsDtoFromJSON,
    AuthCredentialsDtoToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface UsersControllerEditUserRequest {
    userId: number;
    authCredentialsDto: AuthCredentialsDto;
}

export interface UsersControllerRemoveUserRequest {
    userId: number;
}

/**
 * UsersAdminApi - interface
 * 
 * @export
 * @interface UsersAdminApiInterface
 */
export interface UsersAdminApiInterface {
    /**
     * 
     * @param {number} userId 
     * @param {AuthCredentialsDto} authCredentialsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAdminApiInterface
     */
    usersControllerEditUserRaw(requestParameters: UsersControllerEditUserRequest): Promise<runtime.ApiResponse<User>>;

    /**
     */
    usersControllerEditUser(requestParameters: UsersControllerEditUserRequest): Promise<User>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAdminApiInterface
     */
    usersControllerGetUsersWithDevicesRaw(): Promise<runtime.ApiResponse<Array<User>>>;

    /**
     */
    usersControllerGetUsersWithDevices(): Promise<Array<User>>;

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAdminApiInterface
     */
    usersControllerRemoveUserRaw(requestParameters: UsersControllerRemoveUserRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    usersControllerRemoveUser(requestParameters: UsersControllerRemoveUserRequest): Promise<void>;

}

/**
 * 
 */
export class UsersAdminApi extends runtime.BaseAPI implements UsersAdminApiInterface {

    /**
     */
    async usersControllerEditUserRaw(requestParameters: UsersControllerEditUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersControllerEditUser.');
        }

        if (requestParameters.authCredentialsDto === null || requestParameters.authCredentialsDto === undefined) {
            throw new runtime.RequiredError('authCredentialsDto','Required parameter requestParameters.authCredentialsDto was null or undefined when calling usersControllerEditUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthCredentialsDtoToJSON(requestParameters.authCredentialsDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async usersControllerEditUser(requestParameters: UsersControllerEditUserRequest): Promise<User> {
        const response = await this.usersControllerEditUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async usersControllerGetUsersWithDevicesRaw(): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async usersControllerGetUsersWithDevices(): Promise<Array<User>> {
        const response = await this.usersControllerGetUsersWithDevicesRaw();
        return await response.value();
    }

    /**
     */
    async usersControllerRemoveUserRaw(requestParameters: UsersControllerRemoveUserRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersControllerRemoveUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersControllerRemoveUser(requestParameters: UsersControllerRemoveUserRequest): Promise<void> {
        await this.usersControllerRemoveUserRaw(requestParameters);
    }

}
