/* tslint:disable */
/* eslint-disable */
/**
 * Mvd
 * The Mvd API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccessTokenDto,
    AccessTokenDtoFromJSON,
    AccessTokenDtoToJSON,
    AuthCredentialsDto,
    AuthCredentialsDtoFromJSON,
    AuthCredentialsDtoToJSON,
} from '../models';

export interface AuthControllerSignInRequest {
    authCredentialsDto: AuthCredentialsDto;
}

export interface AuthControllerSignUpRequest {
    userGroupId: number;
    authCredentialsDto: AuthCredentialsDto;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * 
     * @param {AuthCredentialsDto} authCredentialsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerSignInRaw(requestParameters: AuthControllerSignInRequest): Promise<runtime.ApiResponse<AccessTokenDto>>;

    /**
     */
    authControllerSignIn(requestParameters: AuthControllerSignInRequest): Promise<AccessTokenDto>;

    /**
     * 
     * @param {number} userGroupId 
     * @param {AuthCredentialsDto} authCredentialsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerSignUpRaw(requestParameters: AuthControllerSignUpRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    authControllerSignUp(requestParameters: AuthControllerSignUpRequest): Promise<void>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     */
    async authControllerSignInRaw(requestParameters: AuthControllerSignInRequest): Promise<runtime.ApiResponse<AccessTokenDto>> {
        if (requestParameters.authCredentialsDto === null || requestParameters.authCredentialsDto === undefined) {
            throw new runtime.RequiredError('authCredentialsDto','Required parameter requestParameters.authCredentialsDto was null or undefined when calling authControllerSignIn.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/signin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthCredentialsDtoToJSON(requestParameters.authCredentialsDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerSignIn(requestParameters: AuthControllerSignInRequest): Promise<AccessTokenDto> {
        const response = await this.authControllerSignInRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async authControllerSignUpRaw(requestParameters: AuthControllerSignUpRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userGroupId === null || requestParameters.userGroupId === undefined) {
            throw new runtime.RequiredError('userGroupId','Required parameter requestParameters.userGroupId was null or undefined when calling authControllerSignUp.');
        }

        if (requestParameters.authCredentialsDto === null || requestParameters.authCredentialsDto === undefined) {
            throw new runtime.RequiredError('authCredentialsDto','Required parameter requestParameters.authCredentialsDto was null or undefined when calling authControllerSignUp.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/signup/{userGroupId}`.replace(`{${"userGroupId"}}`, encodeURIComponent(String(requestParameters.userGroupId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthCredentialsDtoToJSON(requestParameters.authCredentialsDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authControllerSignUp(requestParameters: AuthControllerSignUpRequest): Promise<void> {
        await this.authControllerSignUpRaw(requestParameters);
    }

}
