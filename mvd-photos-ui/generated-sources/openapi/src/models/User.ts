/* tslint:disable */
/* eslint-disable */
/**
 * Mvd
 * The Mvd API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Permission,
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
    UserGroups,
    UserGroupsFromJSON,
    UserGroupsFromJSONTyped,
    UserGroupsToJSON,
} from './';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isAdmin: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    salt: string;
    /**
     * 
     * @type {Permission}
     * @memberof User
     */
    permission: Permission;
    /**
     * 
     * @type {UserGroups}
     * @memberof User
     */
    userGroups: UserGroups;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    userGroupsId: number;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'username': json['username'],
        'password': json['password'],
        'isAdmin': json['isAdmin'],
        'salt': json['salt'],
        'permission': PermissionFromJSON(json['permission']),
        'userGroups': UserGroupsFromJSON(json['userGroups']),
        'userGroupsId': json['userGroupsId'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'username': value.username,
        'password': value.password,
        'isAdmin': value.isAdmin,
        'salt': value.salt,
        'permission': PermissionToJSON(value.permission),
        'userGroups': UserGroupsToJSON(value.userGroups),
        'userGroupsId': value.userGroupsId,
    };
}


